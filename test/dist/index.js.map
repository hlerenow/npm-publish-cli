{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./node_modules/regenerator-runtime/runtime.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","m","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","obj","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","_a","_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default","_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","_callee","_context","console","log","b","version","process","c","d","getter","o","defineProperty","enumerable","get","r","t","mode","__esModule","ns","bind","n","property","p","s","moduleId","l","modules"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","const a = {\n    a: async function() {\n        console.log('I\\'m a');\n        await (new Promise((resolve, reject) => {\n            resolve();\n        }));\n    },\n    b: function() {\n        console.log('I\\'m b');\n        return 1;\n    },\n    version: process.env._VERSION_\n};\n\nexport {\n    a\n};\n\nexport default a;\n"],"sourceRoot":""}